var jsdata = [
    { Q: "\nExplain what is Javascript?\n", A: "\nJavascript is an object-oriented computer programming language commonly used to create interactive effects within web browsers.It is first used by the Netscape browser, that provides access to the HTML document object model (DOM), provides access to the browser object model (BOM). Javascript syntax looks a lot like java, c or c++ syntax.\n" }, { Q: "\nList some data types supported by Javascript?\n", A: "\nUndefined\nNull\nBoolean\nString\nSymbol\nNumber\nObject\n" }, { Q: "\nWhat close() does in Javascript?\n", A: "\nIn Javascript close() method is used to close the current window. You must write window.close() to ensure that this command is associated with a window object and not some other JavaScript object.\n" }, { Q: "\nWhat is the difference between let and var?\n", A: "\nBoth var and let are used for variable/ method declaration in javascript but the main difference between let and var is that var is function scoped whereas let is block scoped.\n" }, { Q: "\nExplain Closures in JavaScript?\n", A: "\nClosures are the combination of lexical environment and function within which the function was declared. This allows JavaScript programmers to write better, more creative, concise and expressive codes. The closure will consist of all the local variables that were in-scope when the closure was created.\n\nSure, closures appear to be complex and beyond the scope, but after you read this article, closures will be much more easy to understand and more simple for your everyday JavaScript programming tasks. JavaScript is  a very function-oriented language it gives the user freedom to use functions as the wish of the programmer.\n" }, { Q: "\nExplain JavaScript Event Delegation Model?\n", A: "\nIn JavaScript, there is some cool stuff that makes it the best of all. One of them is Delegation Model. When capturing and bubbling, allow functions to implement one single handler to many elements at one particular time then that is called event delegation. Event delegation allows you to add event listeners to one parent instead of specified nodes. That particular listener analyzes bubbled events to find a match on the child elements. Many people think it to be complicated but in reality, it is very simple if one starts understanding it.\n" }, { Q: "\nDescribe negative infinity in JavaScript?\n", A: "\nNEGATIVE_INFINITY property represents negative infinity and is a number in javascript, which is derived by \u2018dividing negative number by zero\u2019. It can be better understood as a number that is lower than any other number. Its properties are as follows:\n\u2013 A number of objects need not to be created to access this static property.\n\u2013 The value of negative infinity is the same as the negative value of the infinity property of the global object.\n\nThe values behave differently than the mathematical infinity:\n\nAny positive value, including POSITIVE_INFINITY, multiplied by NEGATIVE_INFINITY is NEGATIVE_INFINITY.\nAny negative value, including NEGATIVE_INFINITY, multiplied by NEGATIVE_INFINITY is POSITIVE_INFINITY.\nZero multiplied by NEGATIVE_INFINITY is NaN.\nNaN multiplied by NEGATIVE_INFINITY is NaN.\nNEGATIVE_INFINITY, divided by any negative value except NEGATIVE_INFINITY, is POSITIVE_INFINITY.\nNEGATIVE_INFINITY, divided by any positive value except POSITIVE_INFINITY, is NEGATIVE_INFINITY.\nNEGATIVE_INFINITY, divided by either NEGATIVE_INFINITY or POSITIVE_INFINITY, is NaN.\nAny number divided by NEGATIVE_INFINITY is zero.\n" }, { Q: "\nExplain function hoisting in JavaScript?\n", A: "\nJavaScript\u2019s default behavior that allows moving declarations to the top is called Hoisting. The 2 ways of creating functions in JavaScript are Function Declaration and Function Expression. Let\u2019s find out more about these:\n\nFunction Declaration\nA function with the specific parameters is known as function declarations. To create a variable in JavaScript is called declarations.\n\ne.g:\n\nhoisted(); // logs \"foo\"\n\nfunction hoisted() {\n\n  console.log('foo');\n\n}\nFunction Expression\n\nWhen a function is created by using an expression it is called function expression.\n\ne.g:\n\nnotHoisted(); // TypeError: notHoisted is not a function\n\nvar notHoisted = function() {\n\n   console.log('bar');\n\n};\n" }, { Q: "\nWhat is the use of let & const?\n", A: "\nIn modern javascript let & const are different ways of creating variables.Earlier in javascript, we use the var keyword for creating variables. let & const keyword is introduced in version ES6 with the vision of creating two different types of variables in javascript one is immutable and other is mutable.\nconst: It is used to create an immutable variable. Immutable variables are variables whose value is never changed in the complete life cycle of the program.\nlet: let is used to create a mutable variable. Mutable variables are normal variables like var that can be changed any number of time.\n" }, { Q: "\nExplain Arrow functions?\n", A: "\nAn arrow function is a consise and short way to write function expressions in Es6 or above.A rrow functions cannot be used as constructors and also does not supports this, arguments, super, or new.target keywords. It is best suited for non-method functions. In general an arrow function looks like const function_name= ()=>{}\n\n const greet=()=>{console.log('hello');}\n greet();\n" }, { Q: "\nWhat are exports and imports?\n", A: "\nImports and exports help us to write modular javascript code. Using Imports and exports we can split our code into multiple files. Imports allow taking only some specific variables or methods of a file. We can import methods or variables that are exported by a module. See the below example for more detail.\n\n //index.js\n\n import name,age from './person'; \n\n console.log(name);\n console.log(age);\n\n //person.js\n\n let name ='Sharad', occupation='developer', age =26;\n\n export { name, age};\n" }, { Q: "\nWhat is difference between module.exports and export?\n", A: "\nThe module is a plain JavaScript object with an exports property. Exports is a plain JavaScript variable that happens to be set to module.exports. At the end of your file, node.js will basically \u2018return\u2019 module.exports to the require function. A simplified way to view a JS file in Node could be this:\n\nvar module = { exports: {} };\nvar exports = module.exports;\n\n// your code\nreturn module.exports;\nIf you set a property on exports, like exports.a = 9;, that will set module.exports.a as well because objects are passed around as references in JavaScript, which means that if you set multiple variables to the same object, they are all the same object; so then exports and module.exports are the same objects.\nBut if you set exports to something new, it will no longer be set to module.exports, so exports and module.exports are no longer the same objects.\n\nSource : https://stackoverflow.com/questions/16383795/difference-between-module-exports-and-exports-in-the-commonjs-module-system\n" }, { Q: "\nHow do you import all exports of a file as an object?\n", A: "\nimport * as object name from \u2018./file.js\u2019 is used to import all exported members as an object. You can simply access the exported variables or methods using dot (.) operator of the object.\n\nExample:\n\nobjectname.member1;\nobjectname.member2;\nobjectname.memberfunc();\n" }, { Q: "\nExplain \u201Cuse strict\u201D ?\n", A: "\n\u201Cuse strict\u201D is a javascript directive that is introduced in Es5. The purpose of using \u201Cuse strict\u201D directive is to enforce the code is executed in strict mode. In strict mode we can\u2019t use a variable without declaring it. \u201Cuse strict\u201D is ignored by earlier versions of Javascript.\n" }, { Q: "\nIn Javascript are calculations with fractional numbers guaranteed to be precise?\n", A: "\nNO, calculations with fractional numbers are not guaranteed to be precise in Javascript\n" }, { Q: "\nList the comparison operators supported by Javascript?\n", A: "\nJavascript supports below comparison operators\n\n> Greater than\n< Less than\n<= Less than or equal to\n>= Greater than or equal to\n== Equal to\n!= Not Equal to\n=== Equal to with datatype check\n!== Not equal to with datatype check\n" }, { Q: "\nHow do you declare variables in Javascript?\n", A: "\nIn Javascript variable are declared using the var keyword.A variable must begin with A letter, $ or _.\n\neg. var myVar=\u201DOnline Interview Questions\u201D;\n\nPS: All variables in Javascript are Case sensitive.\n" }, { Q: "\nWhat will happen if an infinite while loop is run in Javascript?\n", A: "\nThe program will crash the browser.\n" }, { Q: "\nList HTML DOM mouse events?\n", A: "\nHTML DOM mouse events\n\nonclick\nondblclick\nmousemove\nmousedown\nmouseover\nmouseout\nmouseup\n" }, { Q: "\nHow to get the last index of a string in Javascript?\n", A: "\nstring.length-1 is used to get the last index of a string in Javascript\n\nExample Usage:-\n\nvar myString=\"JavascriptQuestions\";\nconsole.log(myString.length-1);\n" }, { Q: "\nHow to get the primitive value of a string in Javascript?\n", A: "\nIn Javascript valueOf() method is used to get the primitive value of a string.\n\nExample Usage:\n\nvar myVar= \"Hi!\"\nconsole.log(myVar.valueOf())\n" }, { Q: "\nWhat are the primitive data types in JavaScript?\n", A: "\nA primitive is a basic data type that\u2019s not built out of other data types. It can only represent one single value. All primitives are built-in data types by necessity, (the compiler has to know about them,) but not all built-in data types are primitives.\n\nIn JavaScript there are 5 primitive data types are available they are undefined, null, boolean, string and number are available.Everything else in Javascript is an object.\n" }, { Q: "\nExplain Event bubbling and Event Capturing in JavaScript?\n", A: "\nEvent Capture and Bubbling: In HTML DOM API there are two ways of event propagation and determines the order in which event will be received. The two ways are Event Bubbling and Event Capturing. The first method event bubbling directs the event to its intended target, and the second is called event capture in which the event goes down to the element.\n\nEvent Capture\nThe capture procedure is rarely used but when it\u2019s used it proves to be very helpful. This process is also called \u2018trickling\u2019. In this process, the event is captured first by the outermost element and then propagated to the innermost element. For example:\n\n<div>\n\n<ul>\n\n<li></li>\n\n</ul>\n\n</div>\nFrom the above example, suppose the click event did occur in the \u2018li\u2019 element, in that case capturing event it will be first handled \u2018div\u2019, then \u2018ul\u2019 and at last the target element will be hit that is \u2018li\u2019\n\nEvent Bubbling\nBubbling just works like the bubbles, the event gets handled by the innermost element and then propagated to the outer element.\n\n<div>\n <ul>\n\n<li></li>\n\n</ul>\n\n</div>\nFrom the above example, suppose the click event did occur in the \u2018li\u2019 element in bubbling model the event will be handled first by \u2018li\u2019 then by \u2018ul\u2019 and at last by \u2018div\u2019 element.\n" }, { Q: "\nWhat does the instanceof operator do?\nIn Javascript instanceof operator checks whether the object is an instance of a class or not:\n\nExample Usage\n\nSquare.prototype = new Square();\nconsole.log(sq instanceof Square); // true\n" }, { Q: "\nWhat is Javascript BOM?\n", A: "\nBOM stands for \u201CBrowser Object Modal\u201D that allows Javascript to \u2018talk\u2019 to the browser, no standards, modern browsers implement similar BOMS \u2013 window, screen, location, history, navigator, timing, cookies.\n" }, { Q: "\nWhat are different types of Popup boxes available in Javascript?\nA:\nIn Javascript there are 3 types of Popup Boxes are available, they are\n\nAlert\nConfirm\nPrompt\n" }, { Q: "\nHow can you create an array in Javascript?\n", A: "\nThere are 3 different ways to create an array in Javascript. They are\n\nBy array literal\nusage:\n var myArray=[value1,value2...valueN];\nBy creating instance of Array\nusage:\nvar myArray=new Array();\nBy using an Array constructor\nusage:\nvar myArray=new Array('value1','value2',...,'valueN');\n" }, { Q: "\nWhat is the \u2018Strict\u2019 mode in JavaScript and how can it be enabled?\n", A: "\nStrict mode is a way to introduce better error-checking into your code. When you use strict mode, you cannot, for example, use implicitly declared variables, or assign a value to a read-only property, or add a property to an object that is not extensible.\n\nYou can enable strict mode by adding \u201Cuse strict\u201D; at the beginning of a file, a program, or a function. This kind of declaration is known as a directive prologue. The scope of a strict mode declaration depends on its context. If it is declared in a global context (outside the scope of a function), all the code in the program is in strict mode. If it is declared in a function, all the code in the function is in strict mode.\n" }, { Q: "\nHow to calculate Fibonacci numbers in JavaScript?\n", A: "\nCalculating Fibonacci series in JavaScript\nFibonacci numbers are a sequence of numbers where each value is the sum of the previous two, starting with} and 1. The first few values are}, 1, 1, 2, 3, 5, 8, 13 ,\u2026,\n\nfunction fib(n) {\n\tvar a=0, b=1;\n\tfor (var i=0; i < n; i++) {\n\t\tvar temp = a+b; \n\t\ta = b;\n\t\tb = temp;\n\t}\n\treturn a;\n}\n" }, { Q: "\nWhat is the difference between the substr() and substring() functions in JavaScript?\n", A: "\nDifference between the substr() and substring() functions in JavaScript.\nThe substr() function has the form substr(startIndex,length). It returns the substring from startIndex and returns \u2018length\u2019 number of characters.\n\nvar s = \"hello\";\n( s.substr(1,4) == \"ello\" ) // true\nThe substring() function has the form substring(startIndex,endIndex). It returns the substring from startIndex up to endIndex \u2013 1.\n\nvar s = \"hello\";\n( s.substring(1,4) == \"ell\" ) // true\n}\n" }, { Q: "\nWhat are different types of Inheritence? Which Inheritance is followed in Javascript.\n", A: "\nThere are two types of Inherientence in OOPS Classic and Prototypical Inheritance. Javascript follows Prototypical Inheritance.\n}\n" }, { Q: "\nWhat is output of undefined * 2 in Javascript?\n", A: "\nnan is output of undefined * 2.\n}\n" }, { Q: "\nHow to add/remove properties to object dynamically in Javascript?\n", A: "\nYou can add a property to an object using object.property_name =value , delete object.property_name is used to delete a property.\n\nExample:\n\n\n    let user = new Object();\n    // adding a property\n    user.name='Anil';\n    user.age  =25;\n    console.log(user);\n    delete user.age;\n    console.log(user);\n \n}\n" }, { Q: "\nHow to convert Javascript date to ISO standard?\n", A: "\ntoISOString() method is used to convert javascript date to ISO standard. It converts JavaScript Date object into a string, using the ISO standard.\n\nUsage:\n\nvar date = new Date();\nvar n = date.toISOString();\nconsole.log(n);\n// YYYY-MM-DDTHH:mm:ss.sssZ\n}\n" }, { Q: "\nHow to get inner Html of an element in JavaScript?\n", A: "\nInnerHTML property of HTML DOM is used to get inner Html of an element in JavaScript.\n\nExample Usage:\n\nThis is inner Element\n<script type=\"text/javascript\">\n\tvar  inner= document.getElementById(\"inner\").innerHTML ;\n\tconsole.log(inner); // This is inner Element\n\tdocument.getElementById(\"inner\").innerHTML = \"Html changed!\";\n\tvar  inner= document.getElementById(\"inner\").innerHTML ;\n\tconsole.log(inner); // Html changed!\n</script>\n\n}\n" }, { Q: "\nHow to clone an object in Javascript?\n", A: "\nObject.assign() method is used for cloning an object in Javascript.Here is sample usage\n\n\tvar x = {myProp: \"value\"};\n\tvar y = Object.assign({}, x); \n}\n" }, { Q: "\nList different ways of empty an array in Javascript?\n", A: "\nIn Javascript, there are many ways to empty an array in Javascript, below we have listed 4 major\n\nBy assigning an empty array.\n\nvar arr1 =[1,4,5,6];\narr1=[];\nBy assigning array length to}.\n\nvar arr2 =[1,4,5,6];\narr2.length=0;\nBy poping the elements of the array.\n\nvar arr2 =[1,4,5,6];\nwhile(arr.length >}) {\n    arr.pop();\n}\nBy using .splice() .\n\nvar arr =[1,4,5,6];\narr.splice(0,arr.length)\n}\n" }, { Q: "\nHow to get an element by class in JavaScript ?\n", A: "\ndocument.getElementsByClassName() method is used in Javascript to get an element with a class name.\n\ngetElementsByClassName()\nMethod Name\tgetElementsByClassName\nSyntax\tdocument.getElementsByClassName('className')\nParameter\tString (name of class)\nOutput\tArray of HTMLCollection that have inputted className\n}\n" }, { Q: "\nExplain Typecasting in Javascript?\n", A: "\nIn Programming whenever we need to convert a variable from one data type to another Typecasting is used. In Javascript, we can do this via library functions. There are basically 3 typecasts are available in Javascript Programming, they are:\n\nBoolean(value): Casts the inputted value to a Boolean\nNumber(value): Casts the inputted value to an Integer or Floating point Number.\nString(value) : Casts the inputted value value a string\n}\n" }, { Q: "\nHow to encode and decode a URL in JavaScript?\n", A: "\nencodeURI() function is used to encode an URL in Javascript.It takes a url string as parameter and return encoded string. Note: encodeURI() did not encode characters like / ? : @ & = + $ #, if you have to encode these characters too please use encodeURIComponent(). Usage:\n\nvar uri = \"my profile.php?name=sammer&occupation=p\u0101ntiNG\";\nvar encoded_uri = encodeURI(uri);\ndecodeURI() function is used to decode an URL in Javascript.It takes a encoded url string as parameter and return decoded string. Usage:\n\nvar uri = \"my profile.php?name=sammer&occupation=p\u0101ntiNG\";\nvar encoded_uri = encodeURI(uri);\ndecodeURI(encoded_uri);\n}\n" }, { Q: "\nHow to you change the title of the page by JavaScript?\n", A: "\nYou can change the title of a webpage using setting the title property of the document object.\n\nExample usage\n\ndocument.title=\"My New Title\";\n}\n" }, { Q: "\nWhat is difference between deep and shallow object coping in JavaScript?\n", A: "\n" }, { Q: "\nList some Unit Testing Frameworks JavaScript\n", A: "\nBelow is the list of few most Popular Javascript Unit Testing Frameworks:\n\nUnit.js\nJasmine\nKarma\nChai\nAVA\nMocha\nJSUnit\nQUnit\nJest\n}\n" }, { Q: "\nHow to add a new property in existing function JavaScript?\n", A: "\n" }, { Q: "\nExplain JavaScript Accessors ?\n", A: "\n" }, { Q: "\nList few difference between primitive and non primitive JavaScript data types?\n", A: "\n" }, { Q: "\nExplain higher-order functions in JavaScript?\n", A: "\n" }, { Q: "\nExplain few difference between null, undefined or undeclared JavaScript variable?\n", A: "\n" }, { Q: "\nHow host objects are different from native objects in JavaScript?\n", A: "\n" }, { Q: "\nWhat is difference between var x =1; and x=1;?\n", A: "\n" }, { Q: "\nExplain spread operator in JavaScript?\n", A: "\n" },
    { Q: "\nHow to call a function in every x seconds in JavaScript?\n", A: "\n" }, { Q: "\nExplain Promise in JavaScript?\n", A: "\n" }, { Q: "\nWhat is difference between Array.splice() and Array.slice() method in JavaScript?\n", A: "\n" }, { Q: "\nIs JavaScript multi-threaded or single-threaded?\n", A: "\nJavaScript is single-threaded.\n" }, { Q: "\nExplain JavaScript Debounce Function?\n", A: "\n" }, { Q: "\nList some Design patterns in JavaScript?\n", A: "\n" }, { Q: "\nWhat is console.time() and console.timeEnd()? What is its syntax, and why is it used?\n", A: "\n" },
    { Q: "\nWhat are different types of Scope Chain available in JavaScript?\n", A: "\n" }, { Q: "\nHow to remove duplicate values from a JavaScript array?\n", A: "\nWe can use array.indexOf method to check a value exists or not. See below example to remove duplicate values.\n\nlet duplicates = ['delhi','kanpur','kanpur','goa','delhi','new york'];\n\nfunction removeDuplicatesValues(arr){\n    let unique_array = [];\n    for(let i =};i < arr.length; i++){\n        if(unique_array.indexOf(arr[i]) == -1){\n            unique_array.push(arr[i])\n        }\n    }\n    return unique_array\n}\n\nconsole.log(removeDuplicatesValues(duplicates));\n}\n" }, { Q: "\nHow to redirect a page to another page in Javascript?\n", A: "\n" }, { Q: "\nIs it possible to do 301 redirects in Javascript ?\n", A: "\nJavaScript entirely runs on the client machine. 301 is response code that is sent by the server as a response. So it is not possible to do 301 Redirects In JavaScript.\n" }, { Q: "\nWrite a program to reverse a string in pure JavaScript?\n", A: "\n" }, { Q: "\nWrite program to remove duplicate in an array ?\n", A: "\n" }, { Q: "\nList few Difference between JAVA and JavaScript?\n", A: "\n" }, { Q: "\nExplain MUL function in Javascript?\n", A: "\n" }, { Q: "\nList few advantages of using JavaScript?\n", A: "\nJavascript is executed on user's computer, the meaning is that whatever you do in Javascript will not add any processing strain on the server. and that's why it is called as the client-side programming language. And this feature makes your sites responsive for the end user and less expensive for you in terms of server traffic.\nWith the help of Javascript, you can create highly responsive interfaces which will improve the user experience and provide dynamic functionality, without waiting for the server to show another page.\nIf you want to make online systems available offline and sync automatically once the computer goes online, then Javascript is the best technology you can use. you can do this using the right browser add-ons (Such as Google or Yahoo Browser Plus).\nContent loading and changing it dynamically. Using Ajax in Javascript you can load content into the document if and when the user needs it, without reloading the entire page.\nUsing the Principles of unobtrusive JavaScript(defensive Scripting), JavaScript can test for what is possible in your browser and react accordingly.\n" }
];
